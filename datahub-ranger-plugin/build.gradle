import org.apache.tools.ant.filters.ReplaceTokens


apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'io.codearte.nexus-staging'



import org.apache.tools.ant.filters.ReplaceTokens


repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnit()
}

dependencies {
    implementation 'org.apache.ranger:ranger-plugins-common:2.2.0'
    compile 'org.apache.logging.log4j:log4j-1.2-api:2.17.1'

    testCompile externalDependency.testng
}

def detailedVersionString = "0.0.0-unknown-SNAPSHOT"
def snapshotVersion = false
if (project.hasProperty("releaseVersion")) {
    version = releaseVersion
    detailedVersionString = releaseVersion
} else {
    try {
        // apply this plugin in a try-catch block so that we can handle cases without .git directory
        apply plugin: "com.palantir.git-version"
        def details = versionDetails()
        detailedVersionString = gitVersion()
        version = details.lastTag
        version = version.startsWith("v")? version.substring(1): version
        def suffix = details.isCleanTag? "": "-SNAPSHOT"
        snapshotVersion = ! details.isCleanTag
    }
    catch (Exception e) {
        e.printStackTrace()
        // last fall back
        version = detailedVersionString
    }
}
// trim version if it is of size 4 to size 3
def versionParts = version.tokenize(".")
if (versionParts.size() > 3) {
    // at-least 4 part version
    // we check if the 4th part is a .0 in which case we want to create a release
    if (versionParts[3] != '0') {
        snapshotVersion = true
    }
    versionParts = versionParts[0..2]
    version = versionParts[0..2].join('.')
}

if (snapshotVersion) {
    if (versionParts[versionParts.size()-1].isInteger()) {
        version = versionParts[0..versionParts.size()-2].join('.') + '.' + (versionParts[versionParts.size()-1].toInteger()+1).toString() + "-SNAPSHOT"
    } else {
        // we are unable to part the last token as an integer, so we just append SNAPSHOT to this version
        version = versionParts[0..versionParts.size()-1].join('.') + '-SNAPSHOT'
    }
}

processResources {
    filter(ReplaceTokens, tokens:[fullVersion: detailedVersionString])
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'DataHub Apache Ranger Plugin'
                group = 'io.acryl'
                artifactId = 'datahub-ranger-plugin'
                description = 'DataHub Apache Ranger plugin for authorization of DataHub resources'
                url = 'https://datahubproject.io'
                scm {
                    connection = 'scm:git:git://github.com/datahub-project/datahub.git'
                    developerConnection = 'scm:git:ssh://github.com:datahub-project/datahub.git'
                    url = 'https://github.com/datahub-project/datahub.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'datahub'
                        name = 'DataHub'
                        email = 'datahub@acryl.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            def ossrhUsername = System.getenv('RELEASE_USERNAME')
            def ossrhPassword = System.getenv('RELEASE_PASSWORD')
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

// Required to submit jar file to staging repo of maven central
nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/" //required only for projects registered in Sonatype after 2021-02-24
    username = System.getenv("NEXUS_USERNAME")
    password = System.getenv("NEXUS_PASSWORD")
}
