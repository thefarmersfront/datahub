apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven'
apply plugin: 'signing'

dependencies {

  //Needed for tie breaking of guava version need for spark and wiremock
  compile(externalDependency.hadoopMapreduceClient) {
    force = true
  }

  compile(externalDependency.hadoopCommon) {
    force = true
  } // required for org.apache.hadoop.util.StopWatch  

  compile(externalDependency.commonsIo) {
    force = true
  } // required for org.apache.commons.io.Charsets that is used internally
  
  compileOnly externalDependency.lombok
  annotationProcessor externalDependency.lombok

  implementation(project(':metadata-models')) {
  	  exclude group: "org.antlr"
      exclude group: "com.google.guava" // causes issues with Guava Stopwatch constructor
  }
  
  implementation(externalDependency.sparkSql){
    exclude group: "org.apache.hadoop"
  } 
  implementation(externalDependency.sparkHive){
    exclude group: "org.apache.hadoop"
  } 
  
  testImplementation(externalDependency.postgresql)
  
  testImplementation externalDependency.mockito
  
  testImplementation(externalDependency.wiremock){
    exclude group: "com.fasterxml.jackson.core"
  } // older version to allow older guava
  
  testImplementation(externalDependency.testContainersPostgresql)	  // older version to allow older jackson
}



shadowJar {
  zip64=true	
  classifier=''
  dependencies {
    exclude(dependency("org.apache.hadoop::"))
    exclude(dependency("org.apache.spark::"))
    exclude(dependency(externalDependency.commonsIo))
  }
}



test {
  useJUnit()
}

assemble {
    dependsOn shadowJar
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives shadowJar
}

// uploadArchives {
//   repositories {
//     mavenDeployer {
//       def ossrhUsername = System.getenv('RELEASE_USERNAME')
//       def ossrhPassword = System.getenv('RELEASE_PASSWORD')
//       beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

//       repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
//         authentication(userName: ossrhUsername, password: ossrhPassword)
//       }

//       snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
//         authentication(userName: ossrhUsername, password: ossrhPassword)
//       }

//       pom.project {
//           //No need to specify name here. Name is always picked up from project name
//         //name 'spark-lineage'
//         packaging 'jar'
//         // optionally artifactId can be defined here
//         description 'Library to push data lineage from spark to datahub'
//         url 'https://datahubproject.io'

//         scm {
//           connection 'scm:git:git://github.com/linkedin/datahub.git'
//           developerConnection 'scm:git:ssh://github.com:linkedin/datahub.git'
//           url 'https://github.com/linkedin/datahub.git'
//         }

//         licenses {
//           license {
//             name 'The Apache License, Version 2.0'
//             url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//           }
//         }

//         developers {
//           developer {
//             id 'datahub'
//             name 'datahub'
//             
//           }
//         }
//       }
//     }
//   }
// }


// signing {
//     def signingKey = findProperty("signingKey")
//     def signingPassword = findProperty("signingPassword")
//     useInMemoryPgpKeys(signingKey, signingPassword)
//     sign configurations.archives
// }

